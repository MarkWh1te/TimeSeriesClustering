package main 
import (
	"encoding/csv"
	"fmt"
	"math"
	"math/rand"
	"os"
	"sort"
	"strconv"
	"time"
)
func k_means_clust_new(data_list map[int][]float64, num_clust int, num_iter int, w int) ([][]float64, map[int][]int, map[int]float64) {

	// generate init centorids
	var keys []int
	for k, _ := range data_list {
		keys = append(keys, k)
	}
	rand_keys := (generateRandomNumber(0, len(keys), num_clust))
	var centroids [][]float64
	for _, v := range rand_keys {
		centroids = append(centroids, data_list[keys[v]])
	}
	//fmt.Println(rand_keys)
	//fmt.Println(data_list)
	// fmt.Println("xxxxx", rand_keys,centroids)

	counter := 0
	assignments := make(map[int][]int)
	sumdistance := make(map[int]float64)
	for i := 0; i < num_iter; i++ {
		counter += 1
		// fmt.Println("counter times", counter, "centroids", centroids)
		// init empty  assignment every iteration
		for k, _ := range centroids {
			assignments[k] = []int{}
			sumdistance[k] = 0.0
		}
		//增加每个质心的误差值保存
		for k, v := range data_list {
			// fmt.Println("pppppppppppppppp")
			min_dist := math.Inf(1)
			var closest_clust int
			// fmt.Println(closest_clust)
			for kk, vv := range centroids {
				// fmt.Println(LB_Keogh(v,vv,w))
				// fmt.Println(v, vv, w)
				if LB_Keogh(v, vv, w) < min_dist {
					cur_dist := DtwDistance(v, vv)
					// fmt.Println(cur_dist)
					if cur_dist < min_dist {
						min_dist = cur_dist
						closest_clust = kk
					}
				}
			}
			// fmt.Println(closest_clust)
			assignments[closest_clust] = append(assignments[closest_clust], k)
			sumdistance[closest_clust] += min_dist
			// fmt.Println("iter times",i,"assignment",assignments)
		}

		for k, v := range assignments {
			sumdistance[k] = sumdistance[k] / float64(len(v))
			var clust_sum []float64
			for _, vv := range v {
				for kkk, vvv := range data_list[vv] {
					if len(clust_sum) < kkk+1 {
						clust_sum = append(clust_sum, 0)
					}
					clust_sum[kkk] += vvv
				}
			}
			for kk, vv := range clust_sum {
				centroids[k][kk] = vv / float64(len(v))
			}

		}
	}
	print(len(assignments))
	return centroids, assignments, sumdistance
}

func bisecting_k_means_clust(data_list map[int][]float64, num_clust int, num_iter int, w int) ([][]float64, [][]int) {
	//var clust_sum []float64
	// generate init centorids
	var allcentroids [][]float64
	var allassign [][]int
	var alldistance []float64
	for {
		//fmt.Println("xxxxxxxxxxxxx")
		//fmt.Println(len(allcentroids))
		var lastd = math.Inf(1)
		lastassign := make(map[int][]int)
		lastdistance := make(map[int]float64)
		var lastcentroids [][]float64
		//求最小值
		//fmt.Println("yyyyyyyyyyyyyyyy")
		for i := 0; i < 20; i++ {
		// for i := 0; i < 100; i++ {

			//fmt.Println("zzz")
			centroids, assignments, sumdistance := k_means_clust_new(data_list, 2, num_iter, w)
			//fmt.Println("iii")
			nowdistance := sum([]float64{sumdistance[0], sumdistance[1]})
			if nowdistance < lastd {
				lastd = nowdistance
				lastcentroids = centroids
				lastassign = assignments
				lastdistance = sumdistance
			}
		}
		// 汇总
		//fmt.Println(lastcentroids)
		//fmt.Println(lastassign)
		//fmt.Println(lastdistance)
		for k, v := range lastcentroids {
			allcentroids = append(allcentroids, v)
			allassign = append(allassign, lastassign[k])
			alldistance = append(alldistance, lastdistance[k])
		}
		//fmt.Println(allcentroids)
		//fmt.Println(allassign)
		//fmt.Println(alldistance)
		if len(allcentroids) == num_clust {
			break
		}
		// 求最大值
		var maxdistance = math.Inf(-1)
		var max_index = 0

		for k, v := range alldistance {
			if v > maxdistance {
				maxdistance = v
				max_index = k
			}
		}
		// fmt.Println(max_index)
		max_index_list := allassign[max_index]
		// fmt.Println(max_index_list)
		tmp := make(map[int][]float64)
		for _, v := range max_index_list {
			tmp[v] = data_list[v]
		}
		//fmt.Println(tmp)
		data_list = tmp
		//fmt.Println(data_list)
		allcentroids = DeleteSlice(allcentroids, max_index)
		//fmt.Println(allcentroids)
		allassign = DeleteSlice3(allassign, max_index)
		//fmt.Println(allassign)
		alldistance = DeleteSlice2(alldistance, max_index)
		//fmt.Println(alldistance)
		//fmt.Println(DeleteSlice3(allcentroids, max_index), e)

		//DeleteSlice(allassign,max_index)
		//DeleteSlice(,max_index)
	}

	fmt.Println(allassign)
	return allcentroids, allassign
}

//删除切片
func DeleteSlice(sss [][]float64, index int) ([][]float64) {
	//sliceValue := reflect.ValueOf(slice)
	length := len(sss)
	if sss == nil || length == 0 || (length-1) < index {
		return nil
	}
	if length-1 == index {
		return sss[0:index]
	} else if (length - 1) >= index {
		//return reflect.AppendSlice(sliceValue.Slice(0, index), sliceValue.Slice(index+1, length)).Interface()
		tmp := sss[0: index]
		for _, v := range sss[index+1:length] {
			tmp = append(tmp, v)
		}
		return tmp
	}
	return nil
}
func DeleteSlice2(sss []float64, index int) ([]float64) {
	//sliceValue := reflect.ValueOf(slice)
	length := len(sss)
	if sss == nil || length == 0 || (length-1) < index {
		return nil
	}
	if length-1 == index {
		return sss[0:index]
	} else if (length - 1) >= index {
		//return reflect.AppendSlice(sliceValue.Slice(0, index), sliceValue.Slice(index+1, length)).Interface()
		tmp := sss[0: index]
		for _, v := range sss[index+1:length] {
			tmp = append(tmp, v)
		}
		return tmp
	}
	return nil
}

func DeleteSlice3(sss [][]int, index int) ([][]int) {
	//sliceValue := reflect.ValueOf(slice)
	length := len(sss)
	if sss == nil || length == 0 || (length-1) < index {
		return nil
	}
	if length-1 == index {
		return sss[0:index]
	} else if (length - 1) >= index {
		//return reflect.AppendSlice(sliceValue.Slice(0, index), sliceValue.Slice(index+1, length)).Interface()
		tmp := sss[0: index]
		for _, v := range sss[index+1:length] {
			tmp = append(tmp, v)
		}
		return tmp
	}
	return nil
}

func ShortData(data map[string][]float64,start int,end int)(map[string][]float64){
	shortData := make(map[string][]float64)
	for i := range data{
		// fmt.Println(data[i][start:end])
		shortData[i] = data[i][start:end]
	}
	return shortData
}

func readcsv(path string) map[string][]float64{
	// read csv part
	file, err := os.Open(path)
	if err != nil {
		// err is printable
		// elements passed are separated by space automatically
		fmt.Println("error:", err)
	}
	// automatically call Close() at the end of current method
	defer file.Close()
	reader := csv.NewReader(file)
	reader.Comma = ','
	rawCSVdata, err := reader.ReadAll()
	if err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
	rawCSVdata = rawCSVdata[:200]

	// sanity check, display to standard output
	// for _, each := range rawCSVdata {
	// fmt.Printf("email : %s and timestamp : %s\n", each[0], each[1])
	// }
	newdata := dataclean(rawCSVdata)
	return newdata
}

func dataclean(raw [][]string) map[string][]float64 {
	csv_data := make(map[string][]float64)
	for _, line := range raw {
		for _, nums := range line {
			if n, err := strconv.ParseFloat(nums, 64); err == nil {
				csv_data[line[0]] = append([]float64{n}, csv_data[line[0]]...)
			}
		}
	}
	return csv_data
}

func get_centroid(datas map[string][]float64,n int) ([][]float64, map[int][]int,[]string,map[string][]float64) {
	var keys = sorted_keys(datas)
	// fmt.Println(keys)
	var data_list [][]float64
	// var data_map map[string][]float64
	data_map := make(map[string][]float64)
	for _, v := range keys {
		a := to_zero(datas[v])
		data_list = append(data_list, a)
		data_map[v] = a
	}
	fmt.Println(data_list)
	fmt.Println("bbbbbbbbbbb")
	centroids, assignments := k_means_clust(data_list, n, 100, 3)
	// centroids, assignments := k_means_clust(data_list, 7, 20, 3)
	// fmt.Println("okkkkkkkkkkk")
	// fmt.Println(centroids)
	// fmt.Println(assignments)
	fmt.Println(data_list)
	return centroids, assignments,keys,data_map
}
func get_centroid_rate(datas map[string][]float64,n int) ([][]float64, map[int][]int,[]string,map[string][]float64) {
	var keys = sorted_keys(datas)
	// fmt.Println(keys)
	var data_list [][]float64
	// var data_map map[string][]float64
	fmt.Println("xxxxxxxx")
	data_map := make(map[string][]float64)
	for _, v := range keys {
		a := to_rate(datas[v])
		data_list = append(data_list, a)
		data_map[v] = a
	}
	// fmt.Println(data_list)
	// fmt.Println(n
	centroids, assignments := k_means_clust(data_list, n, 100, 3)
	// centroids, assignments := k_means_clust(data_list, 7, 20, 3)
	// fmt.Println("okkkkkkkkkkk")
	// fmt.Println(centroids)
	// fmt.Println(assignments)
	return centroids, assignments,keys,data_map
}
func get_centroid_new(datas map[string][]float64,n int) ([][]float64, map[int][]int,[]string,map[string][]float64) {
	var keys = sorted_keys(datas)
	// fmt.Println(keys)
	// var data_list map[int][]float64
	data_list := make(map[int][]float64)
	// var data_map map[string][]float64
	fmt.Println("zzzzzzzz")
	data_map := make(map[string][]float64)
	for k, v := range keys {
		a := to_zero(datas[v])
		data_list[k] = a
		data_map[v] = a
	}
	// fmt.Println(data_list)
	// fmt.Println(n)
	centroids, assignments := bisecting_k_means_clust(data_list, n, 20, 3)
	// fmt.Println("okkkkkkkkkkk")
	// fmt.Println(centroids)
	// fmt.Println(assignments)
	newassignments := make(map[int][]int)
	for k,v := range assignments{
		newassignments[k] = v
	}
	// fmt.Println(newassignments,keys,data_map)
	return centroids, newassignments,keys,data_map
}


func to_zero(arr []float64) []float64 {
	var tmp []float64
	for _, v := range arr {
		tmp = append(tmp, Round(v-arr[0], 2))
	}
	// fmt.Println(tmp)
	return tmp
}

func to_rate(arr []float64) []float64 {
	var tmp []float64
	for k, v := range arr {
		// tmp = append(tmp, Round(v-arr[0], 2))
		// tmp = append(tmp, Round(v/arr[0], 2))
		if k!=0{
		tmp = append(tmp,Round((v-arr[k-1])/arr[k-1],2))
		}
	}
	// fmt.Println(tmp)
	return tmp
}

func sorted_keys(m map[string][]float64) []string {
	sorted_keys := make([]string, 0)
	for k, _ := range m {
		sorted_keys = append(sorted_keys, k)
	}
	sort.Strings(sorted_keys)
	return sorted_keys
}

func Round(val float64, places int) float64 {
	var t float64
	f := math.Pow10(places)
	x := val * f
	if math.IsInf(x, 0) || math.IsNaN(x) {
		return val
	}
	if x >= 0.0 {
		t = math.Ceil(x)
		if (t - x) > 0.50000000001 {
			t -= 1.0
		}
	} else {
		t = math.Ceil(-x)
		if (t + x) > 0.50000000001 {
			t -= 1.0
		}
		t = -t
	}
	x = t / f

	if !math.IsInf(x, 0) {
		return x
	}

	return t
}

func generateRandomNumber(start int, end int, count int) []int {
	//范围检查
	if end < start || (end-start) < count {
		return nil
	}
	//存放结果的slice
	nums := make([]int, 0)
	//随机数生成器，加入时间戳保证每次生成的随机数不一样
	r := rand.New(rand.NewSource(time.Now().UnixNano()))
	for len(nums) < count {
		//生成随机数
		num := r.Intn((end - start)) + start
		//查重
		exist := false
		for _, v := range nums {
			if v == num {
				exist = true
				break
			}
		}
		if !exist {
			nums = append(nums, num)
		}
	}
	return nums
}

func max(data []float64) float64 {
	maximum := math.Inf(-1)
	for i := 0; i < len(data); i++ {
		maximum = math.Max(data[i], maximum)
	}
	return maximum
}

func min(data []float64) float64 {
	minimum := math.Inf(1)
	for i := 0; i < len(data); i++ {
		minimum = math.Min(data[i], minimum)
	}
	return minimum
}

func sum(data []float64) float64 {
	all := 0.0
	for i := 0; i < len(data); i++ {
		all += data[i]
	}
	return all
}

func DtwDistance(s1 []float64, s2 []float64) float64 {
	DTW := make(map[[2]int]float64)
	for i := -1; i < len(s1); i++ {
		for j := -1; j < len(s2); j++ {
			keyarr := [2]int{i, j}
			DTW[keyarr] = math.Inf(1)
		}
	}
	DTW[[2]int{-1, -1}] = 0

	w := math.Max(5, math.Abs(float64(len(s1)-len(s2))))
	for i := 0; i < len(s1); i++ {
		lower := int(math.Max(float64(0), float64(i)-w))
		upper := int(math.Min(float64(len(s2)), float64(i)+w))
		for j := lower; j < upper; j++ {
			dist := math.Pow(s1[i]-s2[j], 2)
			// fmt.Println(i,j,s1[i]+s2[j],dist)
			values := []float64{DTW[[2]int{i, j - 1}], DTW[[2]int{i - 1, j}], DTW[[2]int{i - 1, j - 1}]}
			// DTW[[2]int{i + 1, j + 1}] = dist + min(values)
			DTW[[2]int{i, j}] = dist + min(values)
			// fmt.Println(i,j,dist,values,min(values))
			// fmt.Println(DTW[[2]int{i, j}])
		}
	}
	return math.Sqrt(DTW[[2]int{len(s1) - 1, len(s2) - 1}])
}

func LB_Keogh(s1 []float64, s2 []float64, r int) float64 {
	// fmt.Println(len(s1),len(s2),r)
	LB_sum := 0.0
	for ind, i := range s1 {
		start := 0
		if ind-r >= 0 {
			start = ind - r
		}
		// fmt.Println(start,ind+r)
		end := ind + r
		if end >= len(s1) {
			end = len(s1)
		}
		lower_bound := (min(s2[start:end]))
		upper_bound := (max(s2[start:end]))

		if i > upper_bound {
			LB_sum = LB_sum + math.Pow((i-upper_bound), 2)
		} else if i < lower_bound {
			LB_sum = LB_sum + math.Pow((i-lower_bound), 2)
		}
	}
	return LB_sum
}
func rand_centroids(data_list [][]float64, num_clust int)[][]float64{

	// fmt.Println(data_list)
	// fmt.Println("xxxxxxx")
	// generate init centorids
	rand_keys := (generateRandomNumber(0, len(data_list), num_clust))
	var centroids [][]float64
	for _, v := range rand_keys {
		centroids = append(centroids, data_list[v])
	}
	// fmt.Println(centroids)
	return centroids
}

func get_maxline(data_list [][]float64,centroids [][]float64,ignore_keys []int)([]float64,int){
	cur_dis:=math.Inf(-1)
	max_index:=0
	for k,v :=range data_list{
		pass :=false
		for _,ii :=range ignore_keys{
			if k == ii{
				pass = true
				break
			}
		}
		if pass{
			continue
		}
		var dis float64
		for _,vv :=range centroids{
			dis += DtwDistance(vv,v)
		}
		if dis>cur_dis{
			cur_dis=dis
			max_index=k
		}
	}
	return data_list[max_index],max_index
}

func kpp_centroids(data_list [][]float64, num_clust int)[][]float64{

	// fmt.Println(num_clust)
	// fmt.Println("kpp")
	// generate init centorids
	rand_keys := (generateRandomNumber(0, len(data_list), 1))
	rand_key := rand_keys[0]

	var centroids [][]float64
	var ignore_keys [] int
	centroids = append(centroids,data_list[rand_key])
	ignore_keys = append(ignore_keys,rand_key)
	for i:=0;i<num_clust-1;i++{
		max_line,max_index := get_maxline(data_list,centroids,ignore_keys)
		centroids = append(centroids,max_line)
		ignore_keys = append(ignore_keys,max_index)
	}
	// fmt.Println(centroids)
	return centroids
}

func k_means_clust(data_list [][]float64, num_clust int, num_iter int, w int) ([][]float64, map[int][]int) {

    // centroids:=rand_centroids(data_list,num_clust) // fmt.Println(num_clust)
    centroids:=kpp_centroids(data_list,num_clust)
	// generate init centorids
	// rand_keys := (generateRandomNumber(0, len(data_list), num_clust))
	// var centroids [][]float64
	// for _, v := range rand_keys {
	// 	centroids = append(centroids, data_list[v])
	// }
	// fmt.Println("xxxxx", rand_keys,centroids)

	counter := 0
	assignments := make(map[int][]int)
	for i := 0; i < num_iter; i++ {
		counter += 1
		// fmt.Println("counter times", counter, "centroids", centroi
		// init empty  assignment every iteration
		for k, _ := range centroids {
			assignments[k] = []int{}
		}
		for k, v := range data_list {
			// fmt.Println("pppppppppppppppp")
			min_dist := math.Inf(1)
			var closest_clust int
			// fmt.Println(closest_clust)
			for kk, vv := range centroids {
				if LB_Keogh(v, vv, w) < min_dist {
					cur_dist := DtwDistance(v, vv)
					if cur_dist < min_dist {
						min_dist = cur_dist
						closest_clust = kk
					}
				}
			}
			// fmt.Println(closest_clust)
			assignments[closest_clust] = append(assignments[closest_clust], k)
			// fmt.Println("iter times",i,"assignment",assignments)
		}

		for k, v := range assignments {
			var clust_sum []float64
			for _, vv := range v {
				for kkk, vvv := range data_list[vv] {
					if len(clust_sum) < kkk+1 {
						clust_sum = append(clust_sum, 0)
					}
					clust_sum[kkk] += vvv
				}
			}
			for kk, vv := range clust_sum {
				centroids[k][kk] = vv / float64(len(v))
			}

		}
	}
	// fmt.Println(data_list)
	// fmt.Println(";;;;;;;")
	return centroids, assignments
}

func get_stock_map(stocklist []int)(map[int]int){
	stockmap := make(map[int]int)
	for k,v := range stocklist{
		stockmap[v] = k
	}
	return stockmap
}

var stocklist = []float64{
	20110104,
	20110105,
	20110106,
	20110107,
	20110110,
	20110111,
	20110112,
	20110113,
	20110114,
	20110117,
	20110118,
	20110119,
	20110120,
	20110121,
	20110124,
	20110125,
	20110126,
	20110127,
	20110128,
	20110131,
	20110201,
	20110209,
	20110210,
	20110211,
	20110214,
	20110215,
	20110216,
	20110217,
	20110218,
	20110221,
	20110222,
	20110223,
	20110224,
	20110225,
	20110228,
	20110301,
	20110302,
	20110303,
	20110304,
	20110307,
	20110308,
	20110309,
	20110310,
	20110311,
	20110314,
	20110315,
	20110316,
	20110317,
	20110318,
	20110321,
	20110322,
	20110323,
	20110324,
	20110325,
	20110328,
	20110329,
	20110330,
	20110331,
	20110401,
	20110406,
	20110407,
	20110408,
	20110411,
	20110412,
	20110413,
	20110414,
	20110415,
	20110418,
	20110419,
	20110420,
	20110421,
	20110422,
	20110425,
	20110426,
	20110427,
	20110428,
	20110429,
	20110503,
	20110504,
	20110505,
	20110506,
	20110509,
	20110510,
	20110511,
	20110512,
	20110513,
	20110516,
	20110517,
	20110518,
	20110519,
	20110520,
	20110523,
	20110524,
	20110525,
	20110526,
	20110527,
	20110530,
	20110531,
	20110601,
	20110602,
	20110603,
	20110607,
	20110608,
	20110609,
	20110610,
	20110613,
	20110614,
	20110615,
	20110616,
	20110617,
	20110620,
	20110621,
	20110622,
	20110623,
	20110624,
	20110627,
	20110628,
	20110629,
	20110630,
	20110701,
	20110704,
	20110705,
	20110706,
	20110707,
	20110708,
	20110711,
	20110712,
	20110713,
	20110714,
	20110715,
	20110718,
	20110719,
	20110720,
	20110721,
	20110722,
	20110725,
	20110726,
	20110727,
	20110728,
	20110729,
	20110801,
	20110802,
	20110803,
	20110804,
	20110805,
	20110808,
	20110809,
	20110810,
	20110811,
	20110812,
	20110815,
	20110816,
	20110817,
	20110818,
	20110819,
	20110822,
	20110823,
	20110824,
	20110825,
	20110826,
	20110829,
	20110830,
	20110831,
	20110901,
	20110902,
	20110905,
	20110906,
	20110907,
	20110908,
	20110909,
	20110913,
	20110914,
	20110915,
	20110916,
	20110919,
	20110920,
	20110921,
	20110922,
	20110923,
	20110926,
	20110927,
	20110928,
	20110929,
	20110930,
	20111010,
	20111011,
	20111012,
	20111013,
	20111014,
	20111017,
	20111018,
	20111019,
	20111020,
	20111021,
	20111024,
	20111025,
	20111026,
	20111027,
	20111028,
	20111031,
	20111101,
	20111102,
	20111103,
	20111104,
	20111107,
	20111108,
	20111109,
	20111110,
	20111111,
	20111114,
	20111115,
	20111116,
	20111117,
	20111118,
	20111121,
	20111122,
	20111123,
	20111124,
	20111125,
	20111128,
	20111129,
	20111130,
	20111201,
	20111202,
	20111205,
	20111206,
	20111207,
	20111208,
	20111209,
	20111212,
	20111213,
	20111214,
	20111215,
	20111216,
	20111219,
	20111220,
	20111221,
	20111222,
	20111223,
	20111226,
	20111227,
	20111228,
	20111229,
	20111230,
	20120104,
	20120105,
	20120106,
	20120109,
	20120110,
	20120111,
	20120112,
	20120113,
	20120116,
	20120117,
	20120118,
	20120119,
	20120120,
	20120130,
	20120131,
	20120201,
	20120202,
	20120203,
	20120206,
	20120207,
	20120208,
	20120209,
	20120210,
	20120213,
	20120214,
	20120215,
	20120216,
	20120217,
	20120220,
	20120221,
	20120222,
	20120223,
	20120224,
	20120227,
	20120228,
	20120229,
	20120301,
	20120302,
	20120305,
	20120306,
	20120307,
	20120308,
	20120309,
	20120312,
	20120313,
	20120314,
	20120315,
	20120316,
	20120319,
	20120320,
	20120321,
	20120322,
	20120323,
	20120326,
	20120327,
	20120328,
	20120329,
	20120330,
	20120405,
	20120406,
	20120409,
	20120410,
	20120411,
	20120412,
	20120413,
	20120416,
	20120417,
	20120418,
	20120419,
	20120420,
	20120423,
	20120424,
	20120425,
	20120426,
	20120427,
	20120502,
	20120503,
	20120504,
	20120507,
	20120508,
	20120509,
	20120510,
	20120511,
	20120514,
	20120515,
	20120516,
	20120517,
	20120518,
	20120521,
	20120522,
	20120523,
	20120524,
	20120525,
	20120528,
	20120529,
	20120530,
	20120531,
	20120601,
	20120604,
	20120605,
	20120606,
	20120607,
	20120608,
	20120611,
	20120612,
	20120613,
	20120614,
	20120615,
	20120618,
	20120619,
	20120620,
	20120621,
	20120625,
	20120626,
	20120627,
	20120628,
	20120629,
	20120702,
	20120703,
	20120704,
	20120705,
	20120706,
	20120709,
	20120710,
	20120711,
	20120712,
	20120713,
	20120716,
	20120717,
	20120718,
	20120719,
	20120720,
	20120723,
	20120724,
	20120725,
	20120726,
	20120727,
	20120730,
	20120731,
	20120801,
	20120802,
	20120803,
	20120806,
	20120807,
	20120808,
	20120809,
	20120810,
	20120813,
	20120814,
	20120815,
	20120816,
	20120817,
	20120820,
	20120821,
	20120822,
	20120823,
	20120824,
	20120827,
	20120828,
	20120829,
	20120830,
	20120831,
	20120903,
	20120904,
	20120905,
	20120906,
	20120907,
	20120910,
	20120911,
	20120912,
	20120913,
	20120914,
	20120917,
	20120918,
	20120919,
	20120920,
	20120921,
	20120924,
	20120925,
	20120926,
	20120927,
	20120928,
	20121008,
	20121009,
	20121010,
	20121011,
	20121012,
	20121015,
	20121016,
	20121017,
	20121018,
	20121019,
	20121022,
	20121023,
	20121024,
	20121025,
	20121026,
	20121029,
	20121030,
	20121031,
	20121101,
	20121102,
	20121105,
	20121106,
	20121107,
	20121108,
	20121109,
	20121112,
	20121113,
	20121114,
	20121115,
	20121116,
	20121119,
	20121120,
	20121121,
	20121122,
	20121123,
	20121126,
	20121127,
	20121128,
	20121129,
	20121130,
	20121203,
	20121204,
	20121205,
	20121206,
	20121207,
	20121210,
	20121211,
	20121212,
	20121213,
	20121214,
	20121217,
	20121218,
	20121219,
	20121220,
	20121221,
	20121224,
	20121225,
	20121226,
	20121227,
	20121228,
	20121231,
	20130104,
	20130107,
	20130108,
	20130109,
	20130110,
	20130111,
	20130114,
	20130115,
	20130116,
	20130117,
	20130118,
	20130121,
	20130122,
	20130123,
	20130124,
	20130125,
	20130128,
	20130129,
	20130130,
	20130131,
	20130201,
	20130204,
	20130205,
	20130206,
	20130207,
	20130208,
	20130218,
	20130219,
	20130220,
	20130221,
	20130222,
	20130225,
	20130226,
	20130227,
	20130228,
	20130301,
	20130304,
	20130305,
	20130306,
	20130307,
	20130308,
	20130311,
	20130312,
	20130313,
	20130314,
	20130315,
	20130318,
	20130319,
	20130320,
	20130321,
	20130322,
	20130325,
	20130326,
	20130327,
	20130328,
	20130329,
	20130401,
	20130402,
	20130403,
	20130408,
	20130409,
	20130410,
	20130411,
	20130412,
	20130415,
	20130416,
	20130417,
	20130418,
	20130419,
	20130422,
	20130423,
	20130424,
	20130425,
	20130426,
	20130502,
	20130503,
	20130506,
	20130507,
	20130508,
	20130509,
	20130510,
	20130513,
	20130514,
	20130515,
	20130516,
	20130517,
	20130520,
	20130521,
	20130522,
	20130523,
	20130524,
	20130527,
	20130528,
	20130529,
	20130530,
	20130531,
	20130603,
	20130604,
	20130605,
	20130606,
	20130607,
	20130613,
	20130614,
	20130617,
	20130618,
	20130619,
	20130620,
	20130621,
	20130624,
	20130625,
	20130626,
	20130627,
	20130628,
	20130701,
	20130702,
	20130703,
	20130704,
	20130705,
	20130708,
	20130709,
	20130710,
	20130711,
	20130712,
	20130715,
	20130716,
	20130717,
	20130718,
	20130719,
	20130722,
	20130723,
	20130724,
	20130725,
	20130726,
	20130729,
	20130730,
	20130731,
	20130801,
	20130802,
	20130805,
	20130806,
	20130807,
	20130808,
	20130809,
	20130812,
	20130813,
	20130814,
	20130815,
	20130816,
	20130819,
	20130820,
	20130821,
	20130822,
	20130823,
	20130826,
	20130827,
	20130828,
	20130829,
	20130830,
	20130902,
	20130903,
	20130904,
	20130905,
	20130906,
	20130909,
	20130910,
	20130911,
	20130912,
	20130913,
	20130916,
	20130917,
	20130918,
	20130923,
	20130924,
	20130925,
	20130926,
	20130927,
	20130930,
	20131008,
	20131009,
	20131010,
	20131011,
	20131014,
	20131015,
	20131016,
	20131017,
	20131018,
	20131021,
	20131022,
	20131023,
	20131024,
	20131025,
	20131028,
	20131029,
	20131030,
	20131031,
	20131101,
	20131104,
	20131105,
	20131106,
	20131107,
	20131108,
	20131111,
	20131112,
	20131113,
	20131114,
	20131115,
	20131118,
	20131119,
	20131120,
	20131121,
	20131122,
	20131125,
	20131126,
	20131127,
	20131128,
	20131129,
	20131202,
	20131203,
	20131204,
	20131205,
	20131206,
	20131209,
	20131210,
	20131211,
	20131212,
	20131213,
	20131216,
	20131217,
	20131218,
	20131219,
	20131220,
	20131223,
	20131224,
	20131225,
	20131226,
	20131227,
	20131230,
	20131231,
	20140102,
	20140103,
	20140106,
	20140107,
	20140108,
	20140109,
	20140110,
	20140113,
	20140114,
	20140115,
	20140116,
	20140117,
	20140120,
	20140121,
	20140122,
	20140123,
	20140124,
	20140127,
	20140128,
	20140129,
	20140130,
	20140207,
	20140210,
	20140211,
	20140212,
	20140213,
	20140214,
	20140217,
	20140218,
	20140219,
	20140220,
	20140221,
	20140224,
	20140225,
	20140226,
	20140227,
	20140228,
	20140303,
	20140304,
	20140305,
	20140306,
	20140307,
	20140310,
	20140311,
	20140312,
	20140313,
	20140314,
	20140317,
	20140318,
	20140319,
	20140320,
	20140321,
	20140324,
	20140325,
	20140326,
	20140327,
	20140328,
	20140331,
	20140401,
	20140402,
	20140403,
	20140404,
	20140408,
	20140409,
	20140410,
	20140411,
	20140414,
	20140415,
	20140416,
	20140417,
	20140418,
	20140421,
	20140422,
	20140423,
	20140424,
	20140425,
	20140428,
	20140429,
	20140430,
	20140505,
	20140506,
	20140507,
	20140508,
	20140509,
	20140512,
	20140513,
	20140514,
	20140515,
	20140516,
	20140519,
	20140520,
	20140521,
	20140522,
	20140523,
	20140526,
	20140527,
	20140528,
	20140529,
	20140530,
	20140603,
	20140604,
	20140605,
	20140606,
	20140609,
	20140610,
	20140611,
	20140612,
	20140613,
	20140616,
	20140617,
	20140618,
	20140619,
	20140620,
	20140623,
	20140624,
	20140625,
	20140626,
	20140627,
	20140630,
	20140701,
	20140702,
	20140703,
	20140704,
	20140707,
	20140708,
	20140709,
	20140710,
	20140711,
	20140714,
	20140715,
	20140716,
	20140717,
	20140718,
	20140721,
	20140722,
	20140723,
	20140724,
	20140725,
	20140728,
	20140729,
	20140730,
	20140731,
	20140801,
	20140804,
	20140805,
	20140806,
	20140807,
	20140808,
	20140811,
	20140812,
	20140813,
	20140814,
	20140815,
	20140818,
	20140819,
	20140820,
	20140821,
	20140822,
	20140825,
	20140826,
	20140827,
	20140828,
	20140829,
	20140901,
	20140902,
	20140903,
	20140904,
	20140905,
	20140909,
	20140910,
	20140911,
	20140912,
	20140915,
	20140916,
	20140917,
	20140918,
	20140919,
	20140922,
	20140923,
	20140924,
	20140925,
	20140926,
	20140929,
	20140930,
	20141008,
	20141009,
	20141010,
	20141013,
	20141014,
	20141015,
	20141016,
	20141017,
	20141020,
	20141021,
	20141022,
	20141023,
	20141024,
	20141027,
	20141028,
	20141029,
	20141030,
	20141031,
	20141103,
	20141104,
	20141105,
	20141106,
	20141107,
	20141110,
	20141111,
	20141112,
	20141113,
	20141114,
	20141117,
	20141118,
	20141119,
	20141120,
	20141121,
	20141124,
	20141125,
	20141126,
	20141127,
	20141128,
	20141201,
	20141202,
	20141203,
	20141204,
	20141205,
	20141208,
	20141209,
	20141210,
	20141211,
	20141212,
	20141215,
	20141216,
	20141217,
	20141218,
	20141219,
	20141222,
	20141223,
	20141224,
	20141225,
	20141226,
	20141229,
	20141230,
	20141231,
	20150105,
	20150106,
	20150107,
	20150108,
	20150109,
	20150112,
	20150113,
	20150114,
	20150115,
	20150116,
	20150119,
	20150120,
	20150121,
	20150122,
	20150123,
	20150126,
	20150127,
	20150128,
	20150129,
	20150130,
	20150202,
	20150203,
	20150204,
	20150205,
	20150206,
	20150209,
	20150210,
	20150211,
	20150212,
	20150213,
	20150216,
	20150217,
	20150225,
	20150226,
	20150227,
	20150302,
	20150303,
	20150304,
	20150305,
	20150306,
	20150309,
	20150310,
	20150311,
	20150312,
	20150313,
	20150316,
	20150317,
	20150318,
	20150319,
	20150320,
	20150323,
	20150324,
	20150325,
	20150326,
	20150327,
	20150330,
	20150331,
	20150401,
	20150402,
	20150403,
	20150407,
	20150408,
	20150409,
	20150410,
	20150413,
	20150414,
	20150415,
	20150416,
	20150417,
	20150420,
	20150421,
	20150422,
	20150423,
	20150424,
	20150427,
	20150428,
	20150429,
	20150430,
	20150504,
	20150505,
	20150506,
	20150507,
	20150508,
	20150511,
	20150512,
	20150513,
	20150514,
	20150515,
	20150518,
	20150519,
	20150520,
	20150521,
	20150522,
	20150525,
	20150526,
	20150527,
	20150528,
	20150529,
	20150601,
	20150602,
	20150603,
	20150604,
	20150605,
	20150608,
	20150609,
	20150610,
	20150611,
	20150612,
	20150615,
	20150616,
	20150617,
	20150618,
	20150619,
	20150623,
	20150624,
	20150625,
	20150626,
	20150629,
	20150630,
	20150701,
	20150702,
	20150703,
	20150706,
	20150707,
	20150708,
	20150709,
	20150710,
	20150713,
	20150714,
	20150715,
	20150716,
	20150717,
	20150720,
	20150721,
	20150722,
	20150723,
	20150724,
	20150727,
	20150728,
	20150729,
	20150730,
	20150731,
	20150803,
	20150804,
	20150805,
	20150806,
	20150807,
	20150810,
	20150811,
	20150812,
	20150813,
	20150814,
	20150817,
	20150818,
	20150819,
	20150820,
	20150821,
	20150824,
	20150825,
	20150826,
	20150827,
	20150828,
	20150831,
	20150901,
	20150902,
	20150907,
	20150908,
	20150909,
	20150910,
	20150911,
	20150914,
	20150915,
	20150916,
	20150917,
	20150918,
	20150921,
	20150922,
	20150923,
	20150924,
	20150925,
	20150928,
	20150929,
	20150930,
	20151008,
	20151009,
	20151012,
	20151013,
	20151014,
	20151015,
	20151016,
	20151019,
	20151020,
	20151021,
	20151022,
	20151023,
	20151026,
	20151027,
	20151028,
	20151029,
	20151030,
	20151102,
	20151103,
	20151104,
	20151105,
	20151106,
	20151109,
	20151110,
	20151111,
	20151112,
	20151113,
	20151116,
	20151117,
	20151118,
	20151119,
	20151120,
	20151123,
	20151124,
	20151125,
	20151126,
	20151127,
	20151130,
	20151201,
	20151202,
	20151203,
	20151204,
	20151207,
	20151208,
	20151209,
	20151210,
	20151211,
	20151214,
	20151215,
	20151216,
	20151217,
	20151218,
	20151221,
	20151222,
	20151223,
	20151224,
	20151225,
	20151228,
	20151229,
	20151230,
	20151231,
	20160104,
	20160105,
	20160106,
	20160107,
	20160108,
	20160111,
	20160112,
	20160113,
	20160114,
	20160115,
	20160118,
	20160119,
	20160120,
	20160121,
	20160122,
	20160125,
	20160126,
	20160127,
	20160128,
	20160129,
	20160201,
	20160202,
	20160203,
	20160204,
	20160205,
	20160215,
	20160216,
	20160217,
	20160218,
	20160219,
	20160222,
	20160223,
	20160224,
	20160225,
	20160226,
	20160229,
	20160301,
	20160302,
	20160303,
	20160304,
	20160307,
	20160308,
	20160309,
	20160310,
	20160311,
	20160314,
	20160315,
	20160316,
	20160317,
	20160318,
	20160321,
	20160322,
	20160323,
	20160324,
	20160325,
	20160328,
	20160329,
	20160330,
	20160331,
	20160401,
	20160405,
	20160406,
	20160407,
	20160408,
	20160411,
	20160412,
	20160413,
	20160414,
	20160415,
	20160418,
	20160419,
	20160420,
	20160421,
	20160422,
	20160425,
	20160426,
	20160427,
	20160428,
	20160429,
	20160503,
	20160504,
	20160505,
	20160506,
	20160509,
	20160510,
	20160511,
	20160512,
	20160513,
	20160516,
	20160517,
	20160518,
	20160519,
	20160520,
	20160523,
	20160524,
	20160525,
	20160526,
	20160527,
	20160530,
	20160531,
	20160601,
	20160602,
	20160603,
	20160606,
	20160607,
	20160608,
	20160613,
	20160614,
	20160615,
	20160616,
	20160617,
	20160620,
	20160621,
	20160622,
	20160623,
	20160624,
	20160627,
	20160628,
	20160629,
	20160630,
	20160701,
	20160704,
	20160705,
	20160706,
	20160707,
	20160708,
	20160711,
	20160712,
	20160713,
	20160714,
	20160715,
	20160718,
	20160719,
	20160720,
	20160721,
	20160722,
	20160725,
	20160726,
	20160727,
	20160728,
	20160729,
	20160801,
	20160802,
	20160803,
	20160804,
	20160805,
	20160808,
	20160809,
	20160810,
	20160811,
	20160812,
	20160815,
	20160816,
	20160817,
	20160818,
	20160819,
	20160822,
	20160823,
	20160824,
	20160825,
	20160826,
	20160829,
	20160830,
	20160831,
	20160901,
	20160902,
	20160905,
	20160906,
	20160907,
	20160908,
	20160909,
	20160912,
	20160913,
	20160914,
	20160919,
	20160920,
	20160921,
	20160922,
	20160923,
	20160926,
	20160927,
	20160928,
	20160929,
	20160930,
	20161010,
	20161011,
	20161012,
	20161013,
	20161014,
	20161017,
	20161018,
	20161019,
	20161020,
	20161021,
	20161024,
	20161025,
	20161026,
	20161027,
	20161028,
	20161031,
	20161101,
	20161102,
	20161103,
	20161104,
	20161107,
	20161108,
	20161109,
	20161110,
	20161111,
	20161114,
	20161115,
	20161116,
	20161117,
	20161118,
	20161121,
	20161122,
	20161123,
	20161124,
	20161125,
	20161128,
	20161129,
	20161130,
	20161201,
	20161202,
	20161205,
	20161206,
	20161207,
	20161208,
	20161209,
	20161212,
	20161213,
	20161214,
	20161215,
	20161216,
	20161219,
	20161220,
	20161221,
	20161222,
	20161223,
	20161226,
	20161227,
	20161228,
	20161229,
	20161230,
	20170103,
	20170104,
	20170105,
	20170106,
	20170109,
	20170110,
	20170111,
	20170112,
	20170113,
	20170116,
	20170117,
	20170118,
	20170119,
	20170120,
	20170123,
	20170124,
	20170125,
	20170126,
	20170203,
	20170206,
	20170207,
	20170208,
	20170209,
	20170210,
	20170213,
	20170214,
	20170215,
	20170216,
	20170217,
	20170220,
	20170221,
	20170222,
	20170223,
	20170224,
	20170227,
	20170228,
	20170301,
	20170302,
	20170303,
	20170306,
	20170307,
	20170308,
	20170309,
	20170310,
	20170313,
	20170314,
	20170315,
	20170316,
	20170317,
	20170320,
	20170321,
	20170322,
	20170323,
	20170324,
	20170327,
	20170328,
	20170329,
	20170330,
	20170331,
	20170405,
	20170406,
	20170407,
	20170410,
	20170411,
	20170412,
	20170413,
	20170414,
	20170417,
	20170418,
	20170419,
	20170420,
	20170421,
	20170424,
	20170425,
	20170426,
	20170427,
	20170428,
	20170502,
	20170503,
	20170504,
	20170505,
	20170508,
	20170509,
	20170510,
	20170511,
	20170512,
	20170515,
	20170516,
	20170517,
	20170518,
	20170519,
	20170522,
	20170523,
	20170524,
	20170525,
	20170526,
	20170531,
	20170601,
	20170602,
	20170605,
	20170606,
	20170607,
	20170608,
	20170609,
	20170612,
	20170613,
	20170614,
	20170615,
	20170616,
	20170619,
	20170620,
	20170621,
	20170622,
	20170623,
	20170626,
	20170627,
	20170628,
	20170629,
	20170630,
	20170703,
	20170704,
	20170705,
	20170706,
	20170707,
	20170710,
	20170711,
	20170712,
	20170713,
	20170714,
	20170717,
	20170718,
	20170719,
	20170720,
	20170721,
	20170724,
	20170725,
	20170726,
	20170727,
	20170728,
	20170731,
	20170801,
}

var indumap =map[string][]string{
"430000",{"000046","000402","000620","000838","000931","000979","600007","600159","600240","600246","600266","600657","600743","600791","600890","600376","600340","601588","000537","000897","000965","600158","600225","600322","200160","002146","600149","000616","000638","000679","000809","000631","000718","600095","000668","000863","600606","600615","600620","600621","600622","600638","600641","600647","600649","600665","600675","600696","600748","600823","900928","600848","600503","000961","600716","600736","600533","601155","000517","000558","000909","002133","002244","600052","600173","600175","600208","600683","600724","002147","002208","000671","000732","000797","600067","600223","600777","600807","600753","000615","000926","002305","600568","000918","000002","000006","000011","200011","000014","200029","000029","000031","000036","000040","000042","000043","200056","000056","000069","000090","000502","000534","000573","002016","002285","002314","001979","600162","600185","600684","600383","600393","600325","600048","000608","000505","200505","000567","000886","900955","600555","000514","000656","000736","600565","000803","000540","000667","600239","600773","600817","000691","000981","600658","600463","603778","600215","600604","900902","900911","600639","900932","600663","600895","002077","600064"},
"420000",{"600717","601000","600190","900952","600317","601880","600018","002040","601008","601018","600575","000905","600017","200022","000022","000088","000507","601228","000582","600279","000916","601518","601188","600377","600012","600033","600269","600350","600020","600035","000548","000900","000828","200429","000429","600548","600368","600106","601107","900903","600611","900914","600650","600662","600834","600561","002627","002357","601111","600115","601021","603885","200152","000099","600029","900945","600221","603032","600009","600897","000089","600004","900938","600751","601919","600692","600026","601872","601866","600798","603167","000520","600242","600428","002320","601006","600125","601333","000557","002800","600270","600787","600233","600119","600676","603128","002245","300013","300240","600794","603117","603066","002120","002468","600077","600057","600153","600180","603223","200053","002183","002210","002492","002769","300350","002711"},
"490000",{"601198","601881","002500","000686","600695","900919","600837","601788","600958","601211","601688","601555","000728","601377","601375","000783","601901","000712","000776","002797","002736","600030","600999","000750","600369","600109","601099","002673","000166","601628","601336","601601","000627","601318","000666","000996","600155","600291","600705","600635","600643","600816","600830","603300","600318","600909","000416","600783","600599","000563","000415"},
"640000",{"300034","300430","002510","002282","000410","200530","000530","200706","002204","300024","300097","603315","300510","002158","300126","300551","900920","600841","603515","603131","603960","200570","000570","000777","000816","002255","002438","002426","300091","002514","002559","300260","300280","002796","300421","002808","002747","300420","300549","300450","600862","600481","601100","603699","603090","603339","603036","603016","200771","002122","002164","002444","002520","300145","002532","002552","300257","300266","002633","002686","300435","002779","300441","002793","300488","300611","601002","601177","603088","603701","601882","603667","603298","603218","603337","002347","002760","600218","600520","603308","603011","002639","600592","300095","000811","000880","002026","002248","002270","002595","002537","300185","002598","300391","300443","600960","603029","002046","300064","002423","300080","300179","300263","600172","300161","300278","600421","300345","002031","300154","300151","300193","300400","002786","300464","002823","300503","300545","002816","300606","300607","600382","002272","300092","002480","300470","300540","600765","600806","000837","601369","600243","000595","000617","300055","300309","300472","600860","600582","600560","600031","601611","002337","300195","000856","000923","002459","002691","300486","600169","000633","300210","002621","300293","002689","603318","002698","601106","002278","300483","300442","900925","600835","900924","600843","900947","600320","603012","000425","000551","002009","002367","002435","002530","002483","002499","002564","300201","300402","002645","002685","300382","002722","300385","300631","600501","601313","603800","603203","002006","002021","002430","300307","300411","002730","300461","600526","603611","603789","603901","603338","603311","603908","603238","002690","300577","600761","600375","603656","002529","002509","600815","600388","603686","000680","002073","002111","002353","300099","002490","002526","300569","600579","603638","002613","002535","300480","601717","601038","601608","603508","000821","000852","300276","300527","000157","002097","300035","002523","002209","300004","300173","002611","300281","002757","300415","300529","300526","300457","002833","002837","300619","600894","600499","000528","002651","300471","300434","300023","300103","300116","600302","600984","300084","601798","603169","603843","300159","002658","300445","300371","002338","000901","300165","300354","300416","603416","300306","300349","300553","002849","603556","300066","000676","300007","300259","002857","300557","300338","300515","300112","300417","300572","002175","300114","300397","603969","002342","002487","000890","002150","002445","300228","002787","601028","603028","603626","002647","603040","002352","600577","002132","002843","000039","002791","002850","002846","300629","600139","600558","600992","601020","600165","000008","601766","600495","600262","600967","603111","000925","300351"},
"610000",{"601992","000401","600539","000546","600881","600668","600585","600802","000789","000885","002233","000935","000672","600720","600449","000877","600425","900918","600819","900957","002623","603578","600586","600876","600293","601636","200012","000012","300093","000786","002066","002271","002392","300117","300344","300374","603616","603098","002162","002346","600629","603868","002333","002652","600562","002043","002082","002372","300234","002619","002641","002718","000619","002398","300198","002785","002088","002671","002225","002694","900933","600801","000023","002163","300506","300599","002596","002742","000509","002798","600678","600321","600145","002457","002205","002302"},
"510000",{"000609","000611","000839","600730","000652","600234","600277","000881","600811","600608","600614","900907","600624","600708","600818","900915","600846","900917","600851","000421","600200","600770","600051","600884","000632","600053","600212","600207","600133","600136","600275","000005","000009","000068","000529","300012","000892","000628","600093","600733","600883","600603","600419"},
"410000",{"600886","600011","600578","600900","601991","601016","601985","000695","000600","000958","000767","600780","600863","000692","600167","600719","600795","600396","000875","900937","600726","600864","600642","600021","000301","600982","600023","000543","000993","600483","000899","000720","600027","001896","000883","000966","000722","600744","600969","000027","200037","000037","000531","200539","000539","000601","000690","600098","600868","600236","600310","000591","600116","600452","600101","600131","600644","600674","600505","600979","002039","600995","000791","000862","600509","000605","600008","603603","600874","600187","601199","600283","300388","603817","600461","000544","600168","600769","000685","600323","601368","601158","000598","600617","900913","000669","600333","600856","603689","000407","601139","600917","000593","002267","002700","603393","300070","300156","002573","300332","603588","603903","300334","603126","300137","300355","000820","300125","300262","601200","000035","300152","300172","300190","002479","300203","603568","603177","300090","300056","000826","000939","300536","300187","002341","300335","002672","603797","300422","600292","300425","600217"},
"280000",{"600166","000927","601633","600609","600303","000800","600104","900953","600213","600805","000868","600418","600686","200550","000550","000951","000957","600066","600006","002594","601238","000572","200625","000625","601777","002662","300375","600480","600482","300473","600148","600742","600178","603023","002328","002454","600081","600741","603006","603009","603037","200581","000581","000700","002239","002553","300258","300304","002708","300507","300580","300585","601799","603158","603035","603358","603179","000559","002048","002085","002126","002284","002434","300100","002472","002488","002590","002602","002625","002664","002725","002703","002863","600699","603997","603788","601689","603085","603239","603089","603178","000887","000980","603768","002593","600660","603306","000338","002283","002355","002363","300237","603586","002406","002448","002536","000678","000760","601311","000622","900946","600698","603319","200030","000030","002101","002213","300176","002684","002715","002813","002592","603166","001696","002765","601127","000710","000757","300432","600523","000903","002265","603377","600335","601258","600297","600653","002607","000753","002682","000025","200025","603069","601965","603569","900916","600679","600099","603966","000913","000017","200017","002105","002774","200054","600877","603766"},
"110000",{"600598","600371","000713","300087","002041","000998","300143","300189","002772","600108","600354","600359","600506","600540","000798","002069","002447","600097","002173","200992","002086","600467","600257","300094","002696","600189","000592","002679","600265","002385","603609","002124","603668","002157","000702","002567","000048","002311","002548","000876","600438","002100","600962","300138","600191","002220","000930","000639","002234","002286","002604","600298","600127","000893","300149","000911","000972","600737","600313","000711","300511","601118","300021","600965","002840","002299","002458","002746","002321","002477","002714","002505","600975","300498","000735","002143","300106","300313","600195","300119","002688","600201","603718","600226","603566"},
"630000",{"000922","002576","603988","603819","002196","300626","600580","002176","300308","002249","300048","601126","603025","300407","300040","002028","002058","002184","002527","300222","300286","002090","300141","002546","300356","300466","600268","600406","601222","002322","300360","002767","601567","603015","300427","600590","000682","002339","300208","000400","300018","002121","002169","002334","300124","600525","603100","300011","002665","300593","600405","601558","601908","300491","600202","300129","002506","300153","600151","601727","603159","002309","300029","002531","002610","300393","300617","600475","600401","601218","002266","002364","300068","300118","300111","002534","300316","002801","002795","600290","600537","603806","603726","300274","002335","600163","603628","300105","002580","300490","600416","002218","002227","002518","002851","300376","002733","603861","600847","002630","300362","600875","601012","002202","002350","300477","300444","300120","600468","600550","000585","002606","002667","002622","600110","002451","002706","600517","601616","002074","002323","002471","300215","300265","002692","300447","600973","601700","000967","002112","002276","300069","002617","300283","601877","603606","603618","002298","002300","300062","300341","300001","002359","002498","300423","002358","002560","600312","600885","002452","002533","002168","002212","002441","300499","000806","300414","600353","603333","600112","300140","600379","601179","600192","600869","600089"},
"480000",{"600016","600015","601988","601398","601998","601169","601939","601288","601818","600000","601328","601229","002839","002807","601009","600908","600919","603323","601128","002142","600926","601166","000001","600036","601997"},
"350000",{"000158","600626","900922","600689","002394","002516","600220","600510","600370","601599","002003","002034","002144","002404","600070","600152","600232","600987","601339","603889","603665","000850","002042","002070","002098","002674","600493","200726","000726","002072","002083","002193","600448","002087","600156","000955","000779","000982","300005","002612","002780","601718","002494","002640","002269","002486","600630","900943","600272","002044","002293","600398","600400","603518","603958","002154","002569","002563","002634","002699","002687","600177","603001","603116","603558","603839","002029","601566","603555","002485","600735","600107","002397","002761","200168","002291","002327","002425","002503","002656","002776","002763","002762","603608","603808","600137"},
"210000",{"601857","603727","600759","601088","601898","601101","000937","600997","000723","000968","000983","600123","600157","600740","600408","600546","600348","601001","601699","000780","002128","900948","600758","600179","601011","600508","600971","601918","600397","600188","000933","600121","600403","601666","000571","000835","600395","600792","601225","601015","000552","600714","600381","000159","900936","600295","600193","600532","000409","000655","601969","000629","000762","002738","300157","300191","300370","600871","603979","600583","601808","002629","300164","002207","002828"},
"220000",{"600028","000059","000698","600688","603003","002221","300135","002778","600387","000554","603798","002377","000819","000096","000637","600256","600722","600409","600281","000683","600091","600328","601216","900951","603360","000545","900908","600618","300522","300610","300641","603585","603078","002648","603033","603822","000822","300285","002810","600229","000707","002125","300530","300576","603630","600301","000510","002386","603077","600367","000635","002092","600075","300073","300072","300200","600299","000408","300107","600230","600803","000737","000755","002360","000818","300082","300405","600346","000985","300067","300225","300236","002669","300398","600500","600636","600844","900921","600315","603330","000525","002080","002165","002201","002211","002274","002455","002391","002409","002411","002453","002496","002513","300169","300196","300192","002734","300429","300575","600078","600746","600389","600486","603188","603968","603041","002010","002061","002250","002326","002440","300163","002562","002637","002632","300459","600160","600176","600596","600273","600352","603010","603877","603823","603225","002018","002136","002226","002361","002538","002556","002597","600470","600985","603599","300132","300174","002591","002748","600228","000830","002408","002476","002470","002643","002581","002588","300243","300343","600727","600309","600319","600426","601678","603639","603026","002407","300109","002601","300437","300481","000422","200553","000553","000902","300041","300054","002783","300387","600141","002096","002549","600731","600458","000523","002054","002170","002215","002256","002319","300037","300063","002584","002666","002683","002709","300409","002741","002832","600589","603002","000662","000953","600538","600423","600249","000565","000950","002004","603601","000731","000912","002246","002258","300019","002497","002539","002749","300535","600691","600378","002037","600227","600096","002827","002109","300487","002145","000792","600339","600251","603227","000420","600061","600094","900940","000584","000936","002015","002172","600889","600527","603928","002064","002206","002427","002493","601113","601233","600063","603737","000677","002254","000949","600810","000782","000976","000703","600725","002108","300180","300230","002825","002002","002395","002450","300305","300325","600074","002263","002343","300478","300539","603266","000859","300218","600444","603615","002382","300321","002768","000973","300221","300586","300591","600143","601208","002442","002753","300108","600182","600623","900909","603991","300031","300320","601500","002224","002381","300587","002068","000599","300121","002838","601058","601966","601163","600469","300547","000589","002812"},
"650000",{"002151","300456","600118","600677","600879","300101","600343","600372","600038","000738","600316","002013","002297","300424","000801","002023","002190","600391","000768","600893","600435","600990","600760","600184","601989","300008","600150","002608","601890","300123","300589","600685"},
"450000",{"600723","600859","600861","600361","603123","600821","000715","600694","600747","600697","600891","002561","600628","900912","600648","900923","600827","600838","600280","600682","600327","601010","600814","601116","000417","603031","002264","002788","600693","601933","600858","601366","000501","000759","000785","600774","000419","002251","002277","300413","000987","002187","002356","002336","002419","600712","600515","600729","002697","600828","000516","000564","600785","600778","603101","600655","002024","600122","600704","000829","603708","002416","300622","300022","000882","600306","600824","300500","002344","600790","600865","600415","000058","200058","000061","000062","000861","000560","600738","000151","600058","600082","600241","600739","600247","600278","600605","900927","600822","600826","000626","002091","600128","600287","600250","600981","600120","600857","002102","600755"},
"620000",{"000018","200018","601668","600170","603887","603929","600491","601789","300621","002504","002713","601886","603060","603030","002081","603828","002375","600681","002047","002325","002482","002620","002781","002822","002811","002789","002856","603038","600209","601390","601186","601669","601800","600853","002116","600820","600284","300284","300495","300600","603017","603018","603007","002062","002586","600512","600502","603909","000498","300517","600068","002060","002830","600939","002628","300492","600528","600039","600326","002307","600545","000065","002051","002542","002755","601618","601117","601226","603698","000928","002178","600072","002659","600970","002135","600477","603637","002140","002743","002541","600496","002469","002545","603959","200055","000055","600248","002524","000010","002310","900906","600610","603955","603388","002431","300197","002717","002663","002775","603717","002200"},
"230000",{"000959","000709","000778","000825","600010","200761","000761","000898","600231","600399","600019","002075","002478","600282","002318","002443","002756","600126","600808","002110","600782","600507","600784","600022","600569","000708","000906","000932","000717","601003","601005","600307","600117","600581"},
"720000",{"300027","300251","300291","002739","300364","600037","600977","600715","601999","601929","300336","600637","600825","601595","000681","002071","300555","300528","601928","600959","000156","002188","300133","002624","300426","600113","600633","600551","601801","600373","000719","000665","600757","000504","000917","300148","300592","601098","000038","002181","002027","002238","002292","002502","601900","600936","000793","600880","600996","600831","603999","600721","300071","300058","300392","300612","600386","603598","000673","600088","603729","000607","002712","002400","300242","002148","300104","300315","300383","300418","300431","300541","300608","603000","603986","603888","603138","002123","002354","300597","300059","002517","300226","300578","600634","600652","600661","603189","002315","002464","300295","002095","002131","300113","300571","600576","603258","002555","300520","002174","300299","600986","000971","300494","002113","002261","300043","300052","300359","600892","000503","002558","002818","600804","300288","300588","300603"},
"270000",{"300139","002371","300223","600206","002129","002049","600360","300327","300493","600171","002079","002156","300373","300623","300563","600667","600584","603005","002119","300604","300183","000670","300046","002180","300053","300077","300458","002185","002134","300446","002636","002463","002484","300394","002199","002389","600237","000701","002222","600563","603678","603989","000532","000636","000823","002138","002288","002436","002579","002618","300319","300476","300460","300408","600183","603328","603936","603228","000733","000725","200725","300296","200413","000413","000727","300128","300331","300346","002273","300032","300076","600460","603303","300088","600552","000536","300102","600203","600071","600363","002217","002189","300323","600703","200045","000045","000050","002005","002106","002289","002456","002449","300162","300219","002587","300232","300241","300303","300269","002745","002638","002654","300301","300317","002845","600707","300282","601231","002384","002547","002635","300279","603660","603133","300256","002241","002655","002179","300516","300433","300474","200020","000020","000049","002045","002055","002137","002139","002351","002369","002402","300083","300115","002475","300131","300136","300207","300227","002660","300322","300328","300389","002782","300484","300615","300602","300620","600666","002025","002829","600288","600800","300613","600651","603633","002413","300390","002036","002056","002214","300078","300566","600261","603186","002729","000988","002414","300184","300220","300567","600745","603738","002848","200541","000541","002008","002076","002141","002161","002192","300014","002388","300340","300546","002724","300438","002806","300410","300570","300543","002835","300538","002841","002855","300568","600083","300502","300581"},
"730000",{"002467","600050","603528","300632","002861","300038","300213","300312","300353","600198","600485","000836","000687","300081","002231","603559","600289","300017","300590","300627","200468","002089","002104","002491","300211","300292","600105","600775","600522","600487","002115","300025","300250","600130","900941","600776","603703","000547","002093","002396","002417","300560","300628","600734","002194","002281","300205","600260","600345","600498","600355","000032","000034","000063","000070","002017","002316","002313","300050","300098","002446","002465","300134","002544","002583","300252","300310","002792","300565","300638","300635","603118","603322","000586","300028","300467","000851","000561"},
"330000",{"300272","900910","600619","603579","200418","000418","002290","300217","300342","600854","603366","603355","603519","002011","002032","002050","002403","002418","002473","002508","002677","002860","603677","200521","000521","300247","300475","600983","200512","002614","000404","002242","600690","600898","600336","900956","000533","000651","000921","002035","002260","002543","002616","002668","002670","002676","002681","002723","300403","002705","000333","002759","300625","002366","300249","002519","603996","600870","600060","200016","000016","000100","002052","002420","002429","000810","600839"},
"360000",{"600462","600356","002012","002067","600235","603165","600567","002235","600103","200488","000488","002078","002521","600308","600966","600069","600963","000576","002511","002831","600433","000833","600793","002799","000815","002599","002701","002565","600210","600836","603899","601968","603022","002585","300509","002103","002522","300512","002014","603429","002228","002229","002752","002803","002117","002374","000659","200986","002191","002243","002303","300057","300521","002735","002836","601515","603058","000812","002721","603818","601858","600135","603385","002731","000587","300061","002605","900905","600612","900939","000910","002631","603389","603900","603313","002247","002615","002489","300329","002574","603008","603816","603600","603208","002571","000663","002790","300640","002094","603021","600439","600086","200026","000026","002084","002240","002301","002345","002348","300089","002572","002575","002678","002740","002853","002862","300616","600978","603898","603268","603838","603398","603833","601996","002259","601811","600337","603690","002751"},
"240000",{"000603","000758","601600","000426","000975","000751","002501","600490","002160","002540","300337","601388","002203","600768","601137","000630","002171","600255","002578","600711","600362","002379","600219","000612","600595","600531","601677","002716","600961","000060","002295","600673","000688","600331","000807","000878","002114","600497","600338","601168","600888","600489","600988","601899","000506","002237","600766","600547","002155","600687","600311","600146","601069","000831","600392","600111","603399","600432","603799","600549","002378","002460","603993","002167","002842","600259","000657","000693","002466","000960","002428","600459","000697","600456","601958","000969","000970","600980","300428","000795","000511","300489","002324","002182","300160","300618","603688","603878","600366","600330","600114","002057","603663","603826","300224","600076","603577","300395","000519","600390","600478","002130","002340","002600","002824","300127","000920","002149","600516","601212","000962"},
"340000",{"000729","000860","000848","600559","600809","600365","600616","002304","600300","603369","600059","601579","000596","200596","600199","603589","603198","600573","200869","000869","600600","603779","000799","200019","000019","002387","002461","600238","600132","000568","000858","600702","600779","600519","000752","000929","000995","600543","603919","002646","600084","600197","600429","002820","600887","603866","002568","600073","600597","603777","603020","603886","600305","603299","002515","002570","002557","002702","603696","603345","002695","002330","002481","300175","002726","600882","000895","002216","002582","002770","600186","300268","002650","002661","002847","002852","603517","002495","300146","002732","600866","600872","603288","603336","000716","002329","002507","603027","002053","600873","000796","002719"},
"370000",{"300016","002554","300485","600062","300026","002393","300596","600488","300255","600812","300254","603669","000597","002437","600664","600829","600420","002262","002550","300261","002802","300537","600276","600513","603906","000739","002001","002020","002099","002332","002370","300401","300637","600216","600267","600521","603456","603168","603520","603222","603538","603811","000153","002019","300452","002626","000990","300497","603977","000756","000915","300110","002805","300214","300233","002675","300583","600789","600385","000952","002365","600079","600566","603067","000908","300267","000513","002294","002399","300199","002809","600380","000566","300086","002693","000788","300006","300194","300363","002422","002773","300505","002653","002826","600771","000813","600085","600329","600535","002603","300158","600351","300049","000623","000766","002118","002566","002737","603567","300039","900904","600613","002349","600557","300181","600671","600572","600436","000650","600750","000423","002107","603858","600222","600285","600781","600976","600993","000590","000989","002412","600479","603998","000999","002198","002317","002433","300147","002728","600332","600518","002166","002275","600252","600129","000790","600466","002390","002424","600594","000538","002750","600422","002287","600211","002644","000606","002038","300204","300289","300406","600161","600645","000403","300239","000661","600867","002252","002022","600196","600530","000518","300357","300439","600796","300009","300436","300294","002007","000004","000078","002030","300381","300482","300601","300122","300463","300142","002462","600056","600511","002821","300573","300501","600833","601607","002680","300584","600713","000411","000705","000963","002758","300519","300558","002817","300595","300636","002589","603658","600998","603883","603939","200028","000028","300562","300639","603368","300630","002727","600080","600090","300003","300318","600055","002432","300396","300171","300326","600767","603987","002223","603990","300314","300412","300453","600529","600587","603716","300216","300298","300358","300030","300238","002551","300206","300246","300273","300633","603309","603108","000919","300244","300347","600763","300015","000150","300404","600896","002219","300534"},
"460000",{"600593","603099","300144","900942","600054","603199","000430","000978","000888","900934","600754","601007","000428","000524","200613","000613","000802","002707","600138","600258","601888","600640","900929","600358","002159","300178","603869","002033","002059","600749","000610","600706","002186","002306","000007","000721","002127","000526"},
"710000",{"000938","300045","002383","300065","300302","300367","300386","300449","002819","600100","600764","600855","603019","300368","300202","300462","600601","600680","900930","600850","002236","002415","300270","300548","300582","002859","000997","300605","000977","002376","300479","000021","000066","002152","002177","002197","002308","300042","300130","300155","002528","300177","002577","300532","300333","002815","300531","603160","002312","000948","002065","002153","002279","300002","300010","002362","300036","002368","002373","002410","002405","300075","300079","002439","300150","300166","300182","300229","300212","300231","300271","002642","300324","300287","002649","002657","300352","300369","300419","300365","300399","300379","300579","300523","300455","300513","300384","002771","300552","300465","300496","300542","600588","600536","600271","600410","603859","000889","603050","300290","600718","002232","600701","002195","002401","300074","300253","300245","300168","300170","300330","300380","300378","300469","300508","300609","900901","600602","600654","900926","600845","601519","603918","603039","603881","002380","300209","300339","300598","002280","300020","300033","300300","300550","300451","600797","600571","600570","002230","002331","300051","300096","002474","300188","300525","603636","603444","600756","603421","002296","300248","600476","000555","002063","300047","300044","002421","300277","300264","300235","300085","002512","002609","300167","300297","300311","300348","300377","300448","002766","300533","300518","300468","300561","300556","600728","600446","600556","300275","002253","002268","300366","300440","300559","002777","600455"},
} 